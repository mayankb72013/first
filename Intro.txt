First we used a command --  git init 
this has initialized the folder with git and now the version control system is enabled

All the configurations are stored in the .git/ folder which is a hidden folder and can be seen if we type 'ls -la' in the bash terminal.

To enable the tracking for a file 'git add <filepath>'

To enable tracking for an entire folder 'git add .'

after making the changes if we type 'git diff' we get to see the changes made in the file with respect to the original file.

'git log' allows us to know all the changes we have made in the codebase.

'git log --oneline' shortens the commit id and the entire response of the 'git log'

'git show <commitId>' will give all the changes that have taken place in this commit.

'git blame <filename>' will give you line by line info of who changed what 

'git reset --hard <SHA>' will move the head to the other commit

'git revert <SHA>' will create a new commit reversing the actions of the commit that you have done in the past

STAGING AREA:
=> whenever we make a change in the original document we can see that in the changes 'git status' - modified 
=> if we want to commit our changes we need to move the above file from the changing area ---> staging area.
=> we move files from the changing area --> staging area by 'git add .' or 'git add <filepath>/<filename>' 
=> now we do 'git commit -m "MESSAGE"'
=> To unstage use use 'git restore --stages <file>'



GITHUB
=> Github is a place/server which allows users to contribute to one repository and can be considered the final product of all the contributions
=> To add the local files to the Github repository we do the command 'git remote add <nameOfRemote = origin> <repositorylink>'
=> Now we push the commits into this 'git push -u origin main'

=> To avoid any authentication settings we can use the token method or SSH id method 

BRANCHING 

//MEthod - 1
=> When many people are contributing to same code base then it is better to branch out the code from the 'main' and then make additional commits.
=> Now when we want to push the commits the git makes a single commit for this person and then adds it to the main code-base
=> To make a branch in git we use command 'git branch <BRANCH-NAME>' 
=> To check the names of all the branchese present we use command 'git branch'
=> To change to a particular branch we use 'git checkout <BRANCH-NAME>'
=> To forcefully update the branch in github use the command 'git push -f'
=> To merge the branch to the main we use command 'git merge origin <BRANCH-NAME>' . This will only merge the branch to main in the local system.
=> To show this merger in the Github we use the command 'git push'.
=> The above two should be done after the 'git checkout main'